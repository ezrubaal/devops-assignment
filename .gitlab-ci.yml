# pipeline was not tested, it is more of a general example of how it would work
variables:
  AWS_DEFAULT_REGION: "eu-north-1"
  ECR_REPOSITORY: "851725552187.dkr.ecr.eu-north-1.amazonaws.com"
  SERVICE1_IMAGE: "$ECR_REPOSITORY/eladviprojservice1"
  SERVICE2_IMAGE: "$ECR_REPOSITORY/eladviprojservice2"
  TF_VAR_aws_access_key: $AWS_ACCESS_KEY_ID
  TF_VAR_aws_secret_key: $AWS_SECRET_ACCESS_KEY
  TF_VAR_region: $AWS_DEFAULT_REGION

stages:
  - tf_init
  - tf_plan
  - tf_apply
  - docker_build
  - docker_push
  - k8s_deploy

tf_init:
  stage: tf_init
  script:
    - cd $CI_PROJECT_DIR\tf
    - terraform init

tf_plan:
  stage: tf_plan
  script:
    - cd $CI_PROJECT_DIR\tf
    - terraform plan

tf_apply:
  stage: tf_apply
  script:
    - cd $CI_PROJECT_DIR\tf
    - terraform apply -auto-approve
    - echo "Extracting Terraform outputs..."
    - export EKS_CLUSTER_NAME=$(terraform output -raw eks_cluster_name)
    - export ECR_REPOSITORY=$(terraform output -raw ecr_repository)
    - echo "EKS_CLUSTER_NAME=$EKS_CLUSTER_NAME" >> .env
    - echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> .env
  artifacts:
    reports:
      dotenv: .env

docker_build:
  stage: docker_build
  dependencies:
    - apply
  script:
    - source .env
    - docker build -t $SERVICE1_IMAGE:latest ./packages/service1
    - docker build -t $SERVICE2_IMAGE:latest ./packages/service2

docker_push:
  stage: docker_push
  dependencies:
    - docker_build
  script:
    - source .env
    - $(aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REPOSITORY)
    - docker push $SERVICE1_IMAGE:latest
    - docker push $SERVICE2_IMAGE:latest

k8s_deploy:
  stage: k8s_deploy
  dependencies:
    - docker_push
  script:
    - source .env
    - aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
    - helm upgrade --install mongodb ./helm/mongodb
    - helm upgrade --install service1 ./helm/service1 
    - helm upgrade --install service2 ./helm/service2
